using Microsoft.AspNetCore.Builder;
using Microsoft.AspNetCore.Http;
using Microsoft.Extensions.FileProviders;
using Org.Reddragonit.VueJSMVCDotNet.Interfaces;
using System;
using System.Collections.Generic;
using System.Diagnostics.CodeAnalysis;
using System.Linq;
using System.Text;
using System.Threading.Tasks;

namespace Org.Reddragonit.VueJSMVCDotNet
{
    /// <summary>
    /// Used to supply the additional components for the VueModelsHandler
    /// </summary>
    public class VueModelsOptions
    {

        private readonly ISecureSessionFactory _sessionFactory;
        internal ISecureSessionFactory SessionFactory { get { return _sessionFactory; } }
        private readonly string _baseURL;
        internal string BaseURL { get { return _baseURL; } }
        private readonly bool _ignoreInvalidModels;
        internal bool IgnoreInvalidModels { get { return _ignoreInvalidModels; } }

        /// <summary>
        /// default constructor used to supply the middleware options
        /// </summary>
        /// <param name="sessionFactory">The secure session factory builder</param>
        /// <param name="baseURL">Optional: This will remap all urls provided in attributes to the base path provided (e.g. "/modules/tester/")</param>
        /// <param name="ignoreInvalidModels">Optional: If flagged as true it will ignore/disable invalid models</param>
        public VueModelsOptions(ISecureSessionFactory sessionFactory, string baseURL=null,bool ignoreInvalidModels=false)
        {
            _sessionFactory=sessionFactory;
            _baseURL=baseURL;
            _ignoreInvalidModels=ignoreInvalidModels;
        }
    }

    /// <summary>
    /// Used to supply the additional components for the MessagesHandler
    /// </summary>
    /// 
    public class MessageHandlerOptions
    {
        private readonly string _baseURL;
        internal string BaseURL { get { return _baseURL; } }

        /// <summary>
        /// Constructor for specifying the components required to use the MessageHandler
        /// </summary>
        /// <param name="baseURL">The base url for the messages to exist inside</param>
        public MessageHandlerOptions(string baseURL)
        {
            _baseURL= baseURL;
        }
    }

    /// <summary>
    /// Used to supply the additional components for the VueFilesHandler
    /// </summary>
    /// 
    public class VueFilesHandlerOptions
    {
        
        private readonly string _baseURL;
        internal string BaseURL { get { return _baseURL; } }

        /// <summary>
        /// Constructor for specifying the components required to use the MessageHandler
        /// </summary>
        /// <param name="baseURL">The base url for the messages to exist inside</param>
        public VueFilesHandlerOptions(string baseURL)
        {
            _baseURL= baseURL;
        }
    }

    /// <summary>
    /// Used to supply the additional configurations for the different middleware components
    /// </summary>
    public class VueMiddlewareOptions
    {
        private readonly ILogWriter _logWriter;
        internal ILogWriter LogWriter { get { return _logWriter; } }
        private readonly string _vueImportPath;
        internal string VueImportPath { get { return _vueImportPath; } }
        private readonly string _vueLoaderImportPath;
        internal string VueLoaderImportPath { get { return _vueLoaderImportPath; } }
        private readonly IFileProvider _fileProvider;
        internal IFileProvider FileProvider { get { return _fileProvider; } }
        private readonly VueModelsOptions _modelsOptions;
        internal VueModelsOptions VueModelsOptions { get { return _modelsOptions; } }

        private readonly MessageHandlerOptions _messageOptions;
        internal MessageHandlerOptions MessageOptions { get { return _messageOptions; } }
        private readonly VueFilesHandlerOptions _vueFilesOptions;
        internal VueFilesHandlerOptions VueFilesOptions { get { return _vueFilesOptions; } }

        /// <summary>
        /// The constructor used to build the options for the middle ware components
        /// </summary>
        /// <param name="modelsOptions">Optional: must be provided in order to use the IModel and autogenerated Models/Rest interfaces</param>
        /// <param name="messageOptions">Optional: to be provided if the message translator component is to be used</param>
        /// <param name="logWriter">(optional)An instance of a log writer class to write the logging information to</param>
        /// <param name="fileProvider">(Optional) An instance of a file provider, required if using VueFiles or Messages</param>
        /// <param name="vueFilesOptions">(Optional) Settings to be used file the Vue File handler</param>
        /// <param name="vueImportPath">(Optional) The import path for the VueJs library: default="https://unpkg.com/vue@3/dist/vue.runtime.esm-browser.prod.js"</param>
        /// <param name="vueLoaderImportPath">(Optional) The import path for the Vue-Loader library: default="https://unpkg.com/vue3-sfc-loader@0.8.4/dist/vue3-sfc-loader.esm.js"</param>
        public VueMiddlewareOptions(VueModelsOptions modelsOptions=null, IFileProvider fileProvider = null, MessageHandlerOptions messageOptions=null,ILogWriter logWriter=null,string vueImportPath=null,string vueLoaderImportPath=null,VueFilesHandlerOptions vueFilesOptions=null)
        {
            _modelsOptions=modelsOptions;
            _messageOptions=messageOptions;
            _logWriter=logWriter;
            _vueImportPath=(vueImportPath==null ? "https://unpkg.com/vue@3/dist/vue.runtime.esm-browser.prod.js" : vueImportPath);
            _vueFilesOptions=vueFilesOptions;
            _vueLoaderImportPath=(vueLoaderImportPath==null ? "https://unpkg.com/vue3-sfc-loader@0.8.4/dist/vue3-sfc-loader.esm.js" : vueLoaderImportPath);
            _fileProvider=fileProvider;
            if ((vueFilesOptions!=null||messageOptions!=null) && fileProvider==null)
                throw new ArgumentNullException("fileProvider");
        }
    }

    /// <summary>
    /// This is the middleware defined to intercept requests coming in and handle them when necessary
    /// </summary>
    public class VueMiddleware : IDisposable
    {
        private readonly RequestDelegate _next;
        private readonly VueMiddlewareOptions _options;
        private readonly ModelRequestHandler _modelHandler;
        private readonly MessagesHandler _messageHandler;
        private readonly VueFilesHandler _vueFileHandler;

        /// <summary>
        /// default constructor as per dotnet standards
        /// </summary>
        /// <param name="next">next delegate call as per dotnet standards</param>
        /// <param name="options">the supplied options for creating the middle ware</param>
        public VueMiddleware(RequestDelegate next, VueMiddlewareOptions options)
        {
            _next=next;
            _options=options;
            _modelHandler = (_options.VueModelsOptions==null ? null : new ModelRequestHandler(_options.LogWriter,options.VueModelsOptions.BaseURL,options.VueModelsOptions.IgnoreInvalidModels,options.VueImportPath));
            _messageHandler = (_options.MessageOptions==null ? null : new MessagesHandler(options.FileProvider, options.MessageOptions.BaseURL, options.LogWriter));
            _vueFileHandler = (_options.VueFilesOptions==null ? null : new VueFilesHandler(options.FileProvider, options.VueFilesOptions.BaseURL, options.LogWriter,options.VueImportPath,options.VueLoaderImportPath));
        }

        /// <summary>
        /// Disposable implementation to allow for cleanup and proper disposal
        /// </summary>
        public void Dispose()
        {
            if (_modelHandler!=null)
                _modelHandler.Dispose();
            if (_messageHandler!=null)
                _messageHandler.Dispose();
            if (_vueFileHandler!=null)
                _vueFileHandler.Dispose();
            GC.SuppressFinalize(this);
        }

        /// <summary>
        /// the dotnet required method for produce a dependency injectable middle ware that all calls go through
        /// </summary>
        /// <param name="context">the current httpcontext</param>
        /// <returns>a task</returns>
        public async Task InvokeAsync(HttpContext context) {
            if (_modelHandler!=null && _modelHandler.HandlesRequest(context))
                await _modelHandler.ProcessRequest(context, _options.VueModelsOptions.SessionFactory.ProduceFromContext(context));
            else if (_messageHandler!=null && _messageHandler.HandlesRequest(context))
                await _messageHandler.ProcessRequest(context);
            else if (_vueFileHandler!=null && _vueFileHandler.HandlesRequest(context))
                await _vueFileHandler.ProcessRequest(context);
            else
                await _next(context);
        }
    }

    /// <summary>
    /// Static Middleware Extension to allow for Dependency Inject to occur, allowing for app.UseVueHandler
    /// in order to cause the library to be active in the request process
    /// </summary>
    [ExcludeFromCodeCoverage()]
    public static class VueMiddlewareExtension
    {
        /// <summary>
        /// call based on dotnet standards for middleware dependency injection
        /// </summary>
        /// <param name="builder">the application builder</param>
        /// <param name="options">the options used to define the middle ware settings</param>
        /// <returns>the application builder with the middleware setup</returns>
        public static IApplicationBuilder UseVueMiddleware(
            this IApplicationBuilder builder,
            VueMiddlewareOptions options)
        {
            return builder.UseMiddleware<VueMiddleware>(options);
        }
    }
}
